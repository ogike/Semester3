/* K√©sz√≠tette: Tasi Zolt√°n (ogike)
 * √úres html-be beleillesztve is m≈±k√∂dnek a p√©ld√°k
 * Elvileg le k√©ne fednie az 1. √©vfolyamZH anyag√°t
 *   (max ≈±rlap valid√°ci√≥ hi√°nyzik)
 * Felel≈ëss√©get nem v√°llalok
 */

//putting the canvas at the beginning for later use
const canv = document.createElement('canvas')
canv.width = 600; canv.height = 400
canv.style.border = '1px solid black'
document.body.appendChild(canv)

//##################################################################
//ELS≈ê GYAKORLAT (JS SYNTAX)
{

//v√°ltoz√≥
let a = 5

//string, nem karaketr t√∂mb!

//konstans v√°ltoz√≥
const b = 'almafa'

console.log(b)

//T√∂mb, b√°rmi t√≠pus lehet benne
    //De aj√°nlott homog√©n t√∂mb√∂kkel dolgozni
let tomb = ['barackfa', 12, true] 
                                
//t√∂mb indexel√©se
tomb[1] //12

//t√∂mb hossza
tomb.length //3

//objektumok: kulcs-√©rt√©k p√°rokat tartalmaznak
let obj = {
    key: 12, 
    nev: 'Ferike',
    kor: 18,
    nem: 'n/a'
}

//objektum mez≈ëinek el√©r√©se
obj.nev //'Ferike'
obj['nev'] //'Ferike'

//backtickek mint c string helyettes√≠t√©s $-el
console.log(`Ferike √©letkora ${obj.kor}`)

//t√∂mbben objektumok
let filmek = [
    {
        cim: 'Tenet',
        megjelent: 2020
    },
    {
        cim: '√ñngyilkos osztag',
        megjelent: 2021
    },
    {
        cim: "Sz√ºrke √∂tven √°rnyalata",
        megjelent: 2012
    },
    {
        cim: 'Aranyhaj',
        megjelent: 1800
    }
]

//objektum vs t√∂mb: nagyon hasonl√≥
for(let objektum of filmek){ //iter√°l√°s a t√∂mb objektumain
    for(let mezo in objektum){ //iter√°l√°s az objektum mez≈ëin
        console.log(mezo + ": " + objektum[mezo])
                  //mez≈ë neve      mez≈ë √©rt√©ke
    }
}

//function
function nevelo(){
    return 'A(z)'
}

//ü•µü•µü•µü•µ
filmek.filter( element => element.megjelent > 2000)
      .forEach( elem2  => console.log(`${elem2.cim}`));

//T√∂bb t√∂mbf√ºggv√©ny
// .map((elem) => valami): minden elemmel csin√°ljunk valamit
// .filter(felt√©tel):      csak a felt√©tellel megegyez≈ëket ad vissza
// .find(felt√©tel):        add vissza ez els≈ë elemt, amire igaz
// .findIndexOf(elem):     add vissza az elem sorsz√°m√°t a t√∂mbben
// .fill(mett≈ël, mire):    lecser√©l minden elmet 'mett≈ël' indext≈ël 'mire'-re
// .some(predik√°tum):      van-e elem amire teljes√ºl?
// .every(predik√°tum):     minden elemre teljes√ºl?
// .reduce(√∂sszegz≈ë):      √∂sszegzi az elemeket a megadott fgv alapj√°n
//                             √∂sszegz≈ë: (eddigi, k√∂viElem) => √∂sszes√≠tett
//                             lehet kezd≈ë√©rt√©ket is adni neki 2. param-k√©nt
//                             mint a foldl

}

//##################################################################
//M√ÅSODIK GYAKORLAT
{

//HTML GENER√ÅL√ÅS ############################################
{
//HTML table:
    /*
    <table>
        <tr>
            <td>N√©v</td>
            <td>Nem</td>
            <td>Telep√ºl√©s</td>
        </tr>
        <tr>
            <td>Kis Dalma</td>
            <td>l√°ny</td>
            <td>Feh√©rv√°r</td>
        </tr>
    </table> */

//crate HTML DOM element
let tablazat = document.createElement('table')
    //Note: ezt m√©g hozz√° kell append-elni a dokumentum.body-hoz!!!

const headerNames = ['Cegnev', 'Adoszam', 'Ipar']

//sor k√©sz√≠t√©se, felt√∂lt√©se, besz√∫r√°sa
let headerSor = document.createElement('tr')
headerNames.forEach(element => {
                     //nem headern√©l ez 'td'
    let oszlop = document.createElement('th')

    //set HTML text
    oszlop.innerHTML = element

    //sz√ºl≈ë (headerSor) gyerekeihez utols√≥k√©nt hozz√°adja az √∫j elemet
    headerSor.appendChild(oszlop)
})
tablazat.appendChild(headerSor)

const cegek = [
    {Cegnev: 'HZ Kft',
     Adoszam: '111111',
     Ipar: 'IT'}, 
    {Cegnev: 'Deak √©s T√°rsai Zrt',
     Adoszam: '666666',
     Ipar: 'Fashion'},
    {Cegnev: 'ELTE IK',
     Adoszam: '000000',
     Ipar: 'IT'}
]

//"cegek" t√∂mb alapj√°n t√°bl√°zat felt√∂lt√©s
cegek.forEach(element => {
    let ujsor = document.createElement('tr')
    ujsor.innerHTML = `<td>${element.Cegnev}</td>
                        <td>${element.Adoszam}</td>
                        <td>${element.Ipar}</td>`
    tablazat.appendChild(ujsor)
}) 

//oldalra ezzel tessz√ºk be az √∫j elemet
document.body.appendChild(tablazat)

//referencia el√© besz√∫rja az √∫j elemet
//parent.insertBefore(newChild, refChild)

}


//STYLING ###################################################
{
let bekezdes = document.createElement('p')

//css st√≠lus attrib√∫tumok el√©r√©se
bekezdes.style.fontSize = `12px`
bekezdes.style.color = `#FF88FF`

//st√≠lusoszt√°lyok hozz√°ad√°sa, t√∂rl√©se, toggle
bekezdes.classList.add("myClass")
bekezdes.classList.remove("redClass")
bekezdes.classList.toggle("redClass")
bekezdes.classList.toggle("redClass", bekezdes.style.fontSize > 10) //felt√©teles toggle
bekezdes.classList.contains("myClass") //true

}

//SELECTING DOM ELEMENTS ####################################
{
let myDiv = document.createElement('div')
let myP   = document.createElement('p')
myDiv.appendChild(myP)
document.body.appendChild(myDiv)

//selecting the first result in the document
let div = document.querySelector('div')

//selecting all possible results
    //note: ez Nodelist, nem t√∂mb, de 'Array.from(ps)'-el t√∂mb lesz
let lis = document.querySelectorAll('li')
    //Nodelist-en ("Array-like object") iter√°l√°s (vagy .foreach())
    for (const li of lis) { /*  */ }

//selecting something inside *another element*
    //itt: div-en bel√ºl keres
let p = div.querySelector('p')

//p = <p>This is a <span>text</span></p>
//HTMLbe √≠r√°s
p.innerHTML; //This is a <span>text</span>
p.innerText; //This is a text

//##CSS SELECTORS#################################
//##  n√©vvel:            #   'button'           ##
//##  id-vel:            #   '#navbar'          ##
//##  st√≠lusoszt√°llyal:  #   '.important'       ##
//##  attrib√∫tummal:     #   '[name=password]'  ##
//##  univerz√°lis:       #   '*'                ##
//##  k√∂zvetlen gyermek: #   'form > input'     ##
//##  lesz√°rmazott:      #   '#wrapper div'     ##
//################################################

}


//ATTRIB√öTUM PROGRAMOZ√ÅS ####################################
{

//DOM-ban l√©v≈ë elemekben adatok t√°rol√°sa

/*HTML:
<div 
    data-id="10"
    data-some-text="foo"
></div> */

//Javascript: (camelCase √°t√≠r√°s)
const div = document.querySelector('div')
// reading
div.dataset.id        // "10"
div.dataset.someText  // "foo"
// writing
div.dataset.someText = "bar"
div.dataset.dateOfBirth = "2000-12-12"  
    // HTML-ben hozz√°ad√≥dik: data-date-of-birth="2000-12-12"

}


//ESEM√âNYKEZEL√âS ############################################
{
//p√©ld√°hoz v√°ltoz√≥k
    let myTextField  = document.createElement('input')
    myTextField.type = 'text'
    let myCheckBox   = document.createElement('input')
    myCheckBox.type  = 'checkBox'
    document.body.appendChild(myTextField)
    document.body.appendChild(myCheckBox)
    const button = document.createElement('button')
    button.innerText = 'test button'

//'input' nev≈± text mez≈ë kiolvas√°sa
let bekertNev = myTextField.value

//b√°rmilyen attrib√∫tumot olvashatunk/√≠rhatunk gyakorlatilag
let isChecked = myCheckBox.checked

//CLICK EVENT P√âLDA
//button: esem√©nyt kiv√°lt√≥ elem
                      //'click': esem√©ny t√≠pusa, rengeteg fajta van
button.addEventListener('click', onClick)
                                 //onClick: esem√©nyt kezeL≈ë f√ºggv√©nyem
                                 //z√°r√≥jel n√©lk√ºl kell √°tadni!

               //event: esem√©ny objektum, benne van pl a kiv√°lt√≥ elem (elhagyhat√≥)
function onClick(event) {
    event.target.innerText += ' x' //event.target: amire r√°kattintottunk
    let newP = document.createElement('p')
    let queriedInputField = document.querySelector('input[type=text]')
    let queriedCheckbox   = document.querySelector('input[type=checkbox]')
    
    newP.innerText += queriedInputField.value
    newP.innerText += (queriedCheckbox.checked) ? ', pipa' : ', √ºres'
    document.body.appendChild(newP)
}

document.body.appendChild(button)

//removing event listener:
    //button.removeEventListener('click', onClick)

//esem√©nyek r√∂vid list√°ja:
    //click, mousemove, mousedown, mouseup, scroll
    //keydown, keyup, keypress
    //input: input mez≈ë √©rt√©k√©nek megv√°ltoztat√°sa
    //submit: ≈±rlap elk√ºld√©se

//alap√©rtelmezett m≈±velet megakad√°lyoz√°sa:
    //esem√©nykezel≈ë f√ºggv√©nyen bel√ºl: event.preventDefault()
    //ezzel pl megakad√°lyozhat√≥ hogy egy link megny√≠ljon, stb

}

//KEYBOARD INPUT P√âLDA ######################################
{
let keyPressed = document.createElement('div')
keyPressed.innerText = "Waiting for numbers..."
document.body.appendChild(keyPressed)

let keyInput = document.createElement('input')
keyInput.type = 'text'
document.body.appendChild(keyInput)

keyInput.addEventListener('keydown', (event)=>{
    let betu = event.key.toLowerCase() //event.key: lenyomott billenyt≈±
    keyPressed.innerText = `Key pressed: ` + betu

    if(isNaN(parseInt(betu)) && betu != "backspace"){ //ha amit lenyomtunk nem sz√°m/backspace
        console.log((betu))
        event.preventDefault()
        //itt alap viselked√©s amit megakad√°lyozunk = key be√≠r√°sa a mez≈ëbe
    }

    //note: 
        //key = input amit kapunk
        //code = ahol lenne fizikailag a billenyt≈± (pl z helyett y)
})

}

}

//##################################################################
//NEGYEDIK GYAKORLAT
//DELEGAL F√úGGV√âNY
{

//üçùüçù
    //szulo: f≈ë kezel≈ë
    //gyerek: amire kattintunk/deleg√°lunk (pl.: 'li'/css selector)
    //mikor: esem√©ny amire reag√°lunk (pl.: 'click', √©s m√©g sok m√°s)
    //mit(event, mireKattintottunk): fgv amit h√≠vunk
function delegal(szulo, gyerek, mikor, mit){
    function esemenyKezelo(esemeny){
        let esemenyCelja    = esemeny.target;
        let esemenyKezeloje = this;
        let legkozelebbiKeresettElem = esemenyCelja.closest(gyerek);

        if(esemenyKezeloje.contains(legkozelebbiKeresettElem)){
            mit(esemeny, legkozelebbiKeresettElem);
        }
    }
    szulo.addEventListener(mikor, esemenyKezelo);
}

//Deleg√°l haszn√°lat√°ra p√©lda: t√°bl√°zat sorainak kijel√∂l√©se
function selectRow(event, closest){ //closest: amire kattintunk?
    if(!event.target.matches('th')){ //ha nem a headerre kattintottunk
        closest.classList.toggle('selected')

        //ezt alapb√≥l el√©g lenne megadni html/css filban, class tulajdons√°gak√©nt
        if(closest.classList.contains('selected')){
            closest.style.backgroundColor = 'green';
        }
        else{
            closest.style.backgroundColor = 'white';
        }

    }
}

//ez lesz a sz√ºl≈ë objektum, ami figyeli a gyerekeiben az esem√©nyt
let tablazat = document.querySelector('table')

                //'tr': ha egy tableRow-ra kattintunk, akkor v√°lt√≥djon ki
                      //'click': ha eg√©rkattint√°ssal r√°nyomunk, akkor jelezzen
                               //selectRow: f√ºggv√©nyt, amit megh√≠vunk
delegal(tablazat, 'tr', 'click', selectRow)


//√ñT√ñDIK GYAKORLAT: csoportZH
}

//##################################################################
//√ñT√ñDIK EL≈êAD√ÅS
{

//ID≈êZ√çT≈êK ##################################################
{

function tick() {
    console.log('5 seconds later');
}

//Egy adott f√ºggv√©ny futtat√°sa egyszer 5000 ms m√∫lva
const timer = setTimeout(tick, 5000)

//Egy adott f√ºggv√©ny futtat√°sa 5000 ms-onk√©nt
const intervalTimer = setInterval(tick, 5000)

//id≈ëz√≠t≈ë t√∂rl√©se
clearTimeout(timer)
clearInterval(intervalTimer)

//√öjrarajzol√°s megv√°r√°sa
requestAnimationFrame(function (){
    console.log("Ez m√°r √∫jrarajzol√°s ut√°n van.")
})

}

//Hi√°nyz√≥ r√©sz: √örlap valid√°ci√≥

//RANDOM HASZNOS DOLGOK #####################################
{

//k√©p el≈ët√∂lt√©se mem_kep-be majd cser√©je:
    // const mem_kep = document.createElement('img');
    // mem_kep.src = 'korte.png';

    // //ha szukseges a csere:
    // const kep = document.querySelector('img');
    // kep.src = mem_kep.src;

//T√°bl√°zatokhoz hasznos tulajdons√°gok/met√≥dusok:
// T√°bl√°zatra:
    // rows
    // insertRow(index)
    // deleteRow(index)
// Sorra:
    // rowIndex
    // cells
    // insertCell(index)
    // deleteCell(index)
// Cell√°ra:
    // cellIndex

//visszaadja hogy az √°tadottt td hol van
function xyKoord(td) {
    const x =  td.cellIndex
    const tr = td.parentNode
    const y =  tr.sectionRowIndex
    return {x, y}
}

//String m≈±velet p√©ld√°k

'piros alma'.charAt(2)                    // "r"
'piros alma'.charCodeAt(2)                // 114
'piros alma'.indexOf('alma')              // 6
          //.lastIndexOf: h√°tulr√≥l keres
'piros alma'.localeCompare('piros k√∂rte') // -1
'piros alma'.replace('piros', 's√°rga')    // "s√°rga alma"
'piros alma'.substr(2, 3)                 // "ros"
'piros alma'.split(' ')                   // ["piros","alma"]
'piros alma'.startsWith('piros')          // true
'piros alma'.padStart(15)                 // "     piros alma"
'     piros alma'.trim()                  // "piros alma"
               //.trimStart() √©s .trimEnd()
'piros alma'.toUpperCase()                // "PIROS ALMA"
'piros '.repeat(2)                       // "piros piros "
//string.search(regexp)
//string.match(regexp)

isNaN(parseInt('2164'));     //a sz√∂veg sz√°m-e?
(126.4567).toFixed(2)       // "123.46", kerek√≠t√©s

}

}

//##################################################################
//HATODIK EL≈êAD√ÅS
{

//CANVAS API ################################################
{

//HTML elem: <canvas width="600" height="400"></canvas>

//ezek mindig kellenek nek√ºnk!
const canvas = document.querySelector('canvas')
const ctx = canvas.getContext('2d')

//NOTE: canvas koordin√°tarendszere bal fel√ºl kezd≈ëdik (0,0)

//k√∂vetkez≈ë rajzol√°s st√≠lus√°nak be√°ll√≠t√°sa:
ctx.fillStyle = 'blue'
    //lineWidth
    //fillStyle
    //lineCap: vonalak v√©ge
    //lineJoin: vonalak illeszt√©se
    //√°ttetsz≈ës√©g: globalAlpha

//Sz√∂veg:
ctx.fillText('bottom text', 5, 395)

//Rajzol√°s alakzatokkal:
ctx.fillRect(5, 5, 20, 100);    //teli t√©glalap
ctx.strokeRect(30, 5, 20, 100); //t√©glalap k√∂rvonal


ctx.beginPath();                //√∫j path kezd√©se, el≈ëtte l√©v≈ë kuka
ctx.rect(110, 5, 20, 100);      //t√©glalap alak√∫ path rajzol√°sa
ctx.moveTo(130, 5);             //path-t rajzol√≥ "toll" √°thelyez√©se
ctx.lineTo(160, 35);            //"toll"-al √∫j pontig h√∫z vonalat
ctx.lineTo(130, 65);
ctx.stroke();                   //eddigi path megrajzol√°sa

ctx.beginPath();
ctx.arc(200, 50, 30, 0, 2 * Math.PI);   //teljes k√∂r√≠v megrajzol√°sa
ctx.fill();                     //eddigi √∫tvonal kit√∂lt√©se

ctx.beginPath();
ctx.moveTo(5, 200);
ctx.quadraticCurveTo(50, 150, 105, 200); //control point x/y, endpoint x/y
ctx.closePath();                //a mostani path-ban √∂sszek√∂ti az utols√≥/els≈ë pontot
ctx.stroke();

//t√∂bbi opci√≥k: ellipse, bezierCurveTo

//gradient: egy k√ºl√∂n v√°ltoz√≥ba kell csin√°lni miel≈ëtt haszn√°lod
//createLG(startX/y, endX/Y): megadja a gradient vonal√°t a canvason
const gradSky = ctx.createLinearGradient(0, 230, 0, 350)
gradSky.addColorStop(0, '#D8097E') //a gradient vonal 0%-√°n√°l ez legyen
gradSky.addColorStop(0.5, '#8C579C')
gradSky.addColorStop(1, '#24468E')

ctx.fillStyle = gradSky //gradient alkalmaz√°sa
ctx.fillRect(0, 230, 200, 120)

//ctx.translate: eg√©sz koordin√°ta rendszer eltol√°sa
    //rotate, scale, transform(√∂sszetett)

//K√©p rajzol√°sa:
const pic = document.createElement('img')
        //√°ltal√°ban relat√≠v √∫tvonal
pic.src = 'https://people.inf.elte.hu/hm37uq/frog.png'
pic.addEventListener('load', () => { //amint bet√∂lti, futassa le ezt
    ctx.drawImage(pic, 75, 265, 50, 50)
})

}

//ANIMATION CYCLE ###########################################
{
let lastFrameTime = performance.now();

function next() {
    const currentTime = performance.now();
    const deltaTime = currentTime - lastFrameTime;

    update(deltaTime); // Update current state
    render(); // Rerender the frame

    lastFrameTime = currentTime;

    requestAnimationFrame(next);
}

function update(dt) {
    //updating the model here based on deltaTime
}

function render() {
    //redrawing canvas stuff here (view)
}

next(); // Start the loop
}

}